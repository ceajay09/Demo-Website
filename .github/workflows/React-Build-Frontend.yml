# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build-react:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci --legacy-peer-deps
    - run: CI=false npm run build --if-present #Check warnings

    - name: Archive Frontend Jar
      uses: actions/upload-artifact@v4
      with:
        name: frontend-react
        path: |
          build
  
  
  # dockerize:
  #   needs: build-react
  #   runs-on: ubuntu-latest
  #   steps:
  #    - name: Download math result for job 1
  #      uses: actions/download-artifact@v4
  #      with:
  #         name: frontend-react
      
  #    - name: Build the Docker image
  #      uses: actions/checkout@v3
  #    - run: docker build . --file Dockerfile --tag frontend:$(date +%s)
     #run: docker publish donoooo

  push-to-aws:
    needs: build-react
    runs-on: ubuntu-latest
    steps:
          # Dieser Schritt lädt das Artefakt herunter und extrahiert es in das Arbeitsverzeichnis des Jobs
      - name: Download Frontend Build Artefact
        uses: actions/download-artifact@v4
        with:
          name: frontend-react
          path: build/

      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 # More information on this action can be found below in the 'AWS Credentials' section
        with:
          #role-to-assume: arn:aws:iam::471112833916:user/github-actions-cicd
          aws-region: eu-central-1
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: private

      - name: Echo Docker Image Name
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: my-app_frontend
          IMAGE_TAG: dev # oder ${{ github.sha }} für ein dynamisches Tag
        run: echo "$REGISTRY/$REPOSITORY:$IMAGE_TAG"
    
      - name: Run List Files
        run: ls

      - name: Build Docker Image
        env:
          REPOSITORY: my-app_frontend
          IMAGE_TAG: dev # oder ${{ github.sha }} für ein dynamisches Tag
        run: docker build -t $REPOSITORY:$IMAGE_TAG -f Dockerfile .
      
      - name: Tag Docker Image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: my-app_frontend
          IMAGE_TAG: dev # oder ${{ github.sha }} für ein dynamisches Tag
        run: docker tag $REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:$IMAGE_TAG
      
      - name: Push Docker Image to ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: my-app_frontend
          IMAGE_TAG: dev # oder ${{ github.sha }} für ein dynamisches Tag
          AWS_DEFAULT_REGION: eu-central-1
          AWS_REGION: eu-central-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
    

 
